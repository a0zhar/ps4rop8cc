#!/bin/bash

# Store the path of this script itself
self="$0"

# Check if the script path is an absolute path If not, 
# convert to absolute path
if ["x${self:0:1}" != x/];
   then self="$PWD/$self"
fi

# Get the directory of the script
self="$(dirname "$self")"

# Create a temporary directory for intermediate files
temp="$(mktemp -d)"

# Function to handle failure scenarios, exits the 
# script with status code 1 (failure)
failure () {
    # If KEEPTEMP is not set, remove the temporary directory
    if ["x$KEEPTEMP" == x]; 
       then rm -rf "$temp"
    fi
    exit 1
}

# First argument is the output file, then we shift 
# arguments so $1 becomes the next argument
out_o="$1"
shift

# Compile the crt_rop.c file to assembly and store in temporary file
"$self/../8cc" "$self/../crt/crt_rop.c" -S -o "$temp/pp.s" || failure

# Copy the generated assembly to the linked.s file
cat "$temp/pp.s" > "$temp/linked.s" || failure

# Create an empty custom.rop file
touch "$temp/custom.rop"

# Loop through all remaining arguments
while ["x$1" != x]; do
    ii="$1"
    ll="${#ii}"
    ll="$((ll-4))"

    # Check if the file has a .rop extension, and if true then we
    # concatenate the contents of the .rop file to custom.rop
    if ["${ii:ll}" == ".rop"];
       then cat "$ii" >> "$temp/custom.rop"
    else
        # Generate a C file with built-in functions
        cat > "$temp/pp.c" << EOF
unsigned short __builtin_bswap16(unsigned short);
unsigned int __builtin_bswap32(unsigned int);
unsigned long long __builtin_bswap64(unsigned long long);
EOF
        # Preprocess the C file with specific definitions and include paths
        cpp -DPRINTF_DISABLE_SUPPORT_FLOAT                                \
            '-D__asm__(...)=' '-D__restrict=' '-D__extension__='          \
            '-D__builtin_va_list=int' '-D__inline=' '-D__attribute__(x)=' \
            -isystem "$self/../include"                                   \
            -isystem "$self/../.." "$1" >> "$temp/pp.c" || failure

        # Compile the preprocessed C file to assembly
        "$self/../8cc" "$temp/pp.c" -S -o "$temp/pp.s" || failure

        # Concatenate the generated assembly to linked.s
        cat "$temp/pp.s" >> "$temp/linked.s" || failure

        # Add a newline to linked.s
        echo >> "$temp/linked.s" || failure
    fi
    # Move to the next argument
    shift
done

# Append hand-written ROP to linked.rop
cat >> "$temp/linked.rop" << EOF
pop rdi
dp stack_bottom
pop rsi
dq 8
sub rdi, rsi ; mov rdx, rdi
pop rax
dp ret_addr
mov [rdi], rax
pop rsp
dp _main
ret_addr:
mov rdi, rcx
pop rsp
dp stack_bottom
stack:
\$times 65536 db 0
stack_bottom:
dp exit
EOF

# Process the linked.s file through nativecalls.py and s2rop.py, append to linked.rop
python3 "$self/nativecalls.py" < "$temp/linked.s" | python3 "$self/s2rop.py" >> "$temp/linked.rop" || failure

# Append custom.rop contents to linked.rop
cat "$temp/custom.rop" >> "$temp/linked.rop"

# Convert the ROP chain to assembly
python3 "$self/rop2asm.py" < "$temp/linked.rop" > "$temp/linked.asm"

# Assemble the final output using YASM
yasm -f elf64 "$temp/linked.asm" -o "$out_o" || failure

# Clean up temporary files if KEEPTEMP is not set
if ["x$KEEPTEMP" == x];
    then rm -rf "$temp"
fi
